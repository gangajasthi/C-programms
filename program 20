#include <iostream>
using namespace std;

// Base class
class Shape {
public:
    // Virtual function
    virtual void draw() {
        cout << "Drawing a generic shape." << endl;
    }
};

// Derived class 1
class Circle : public Shape {
public:
    void draw() override {  // Override base class function
        cout << "Drawing a Circle." << endl;
    }
};

// Derived class 2
class Rectangle : public Shape {
public:
    void draw() override {  // Override base class function
        cout << "Drawing a Rectangle." << endl;
    }
};

int main() {
    Shape *shapePtr;  // Pointer to base class

    Circle c;
    Rectangle r;

    // Point to Circle object
    shapePtr = &c;
    shapePtr->draw();  // Calls Circle's draw() at runtime

    // Point to Rectangle object
    shapePtr = &r;
    shapePtr->draw();  // Calls Rectangle's draw() at runtime

    return 0;
}
